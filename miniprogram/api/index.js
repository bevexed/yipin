"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = require("./ajax");
exports.reqBanner = function () { return ajax_1.ajax('/api/banners', {}); };
exports.reqAfterQuery = function (imei) { return ajax_1.ajax('/api/after_query', { imei: imei }); };
exports.reqRegister = function (_a) {
    var openid = _a.openid, phone = _a.phone, password = _a.password, code = _a.code;
    return ajax_1.ajax('/api/register', { openid: openid, phone: phone, password: password, code: code });
};
exports.reqPartner = function (data) { return ajax_1.ajax('/api/partner', data); };
exports.reqAddressList = function () { return ajax_1.ajax('/api/address_list'); };
exports.reqPhoneModels = function () { return ajax_1.ajax('/api/phone_models'); };
exports.sendMsg = function (_a) {
    var mobile = _a.mobile, type = _a.type;
    return ajax_1.ajax('/api/send_message', { mobile: mobile, type: type });
};
exports.reqLogin = function (_a) {
    var type = _a.type, openid = _a.openid, phone = _a.phone, password = _a.password;
    return ajax_1.ajax('/api/login', { type: type, openid: openid, phone: phone, password: password });
};
exports.reqGetFreeFilm = function (data) { return ajax_1.ajax('/api/get_free_film', data); };
exports.reqService = function () { return ajax_1.ajax('/api/service'); };
exports.reqUpdateBasicInformation = function (data) { return ajax_1.ajax('/api/update_basic_information', data); };
exports.requpdate_gathering_information = function (data) { return ajax_1.ajax('/api/update_gathering_information', data); };
exports.reqUserInformation = function (token) { return ajax_1.ajax('/api/user_information', token); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEyQjtBQU9kLFFBQUEsU0FBUyxHQUFHLGNBQU0sT0FBQSxXQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxFQUF4QixDQUF3QixDQUFDO0FBRzNDLFFBQUEsYUFBYSxHQUFHLFVBQUMsSUFBWSxJQUFLLE9BQUEsV0FBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDO0FBR25FLFFBQUEsV0FBVyxHQUFHLFVBQUMsRUFBb0M7UUFBbkMsa0JBQU0sRUFBRSxnQkFBSyxFQUFFLHNCQUFRLEVBQUUsY0FBSTtJQUFXLE9BQUEsV0FBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLElBQUksTUFBQSxFQUFDLENBQUM7QUFBdEQsQ0FBc0QsQ0FBQTtBQWM5RyxRQUFBLFVBQVUsR0FBRyxVQUFDLElBQWEsSUFBSyxPQUFBLFdBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQTFCLENBQTBCLENBQUM7QUFJM0QsUUFBQSxjQUFjLEdBQUcsY0FBTSxPQUFBLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUF6QixDQUF5QixDQUFDO0FBSWpELFFBQUEsY0FBYyxHQUFHLGNBQU0sT0FBQSxXQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBekIsQ0FBeUIsQ0FBQztBQUdqRCxRQUFBLE9BQU8sR0FBRyxVQUFDLEVBQW1CO1FBQWxCLGtCQUFNLEVBQUUsY0FBSTtJQUFXLE9BQUEsV0FBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUMsTUFBTSxRQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUMsQ0FBQztBQUF6QyxDQUF5QyxDQUFDO0FBVTdFLFFBQUEsUUFBUSxHQUFHLFVBQUMsRUFBc0M7UUFBckMsY0FBSSxFQUFFLGtCQUFNLEVBQUUsZ0JBQUssRUFBRSxzQkFBUTtJQUFhLE9BQUEsV0FBSSxDQUFDLFlBQVksRUFBRSxFQUFDLElBQUksTUFBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFDLENBQUM7QUFBbkQsQ0FBbUQsQ0FBQztBQVczRyxRQUFBLGNBQWMsR0FBRyxVQUFDLElBQWMsSUFBSyxPQUFBLFdBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQztBQUd0RSxRQUFBLFVBQVUsR0FBRyxjQUFNLE9BQUEsV0FBSSxDQUFDLGNBQWMsQ0FBQyxFQUFwQixDQUFvQixDQUFDO0FBV3hDLFFBQUEseUJBQXlCLEdBQUcsVUFBQyxJQUFxQixJQUFHLE9BQUEsV0FBSSxDQUFDLCtCQUErQixFQUFDLElBQUksQ0FBQyxFQUExQyxDQUEwQyxDQUFDO0FBYWhHLFFBQUEsK0JBQStCLEdBQUcsVUFBQyxJQUEwQixJQUFLLE9BQUEsV0FBSSxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxFQUEvQyxDQUErQyxDQUFDO0FBR2xILFFBQUEsa0JBQWtCLEdBQUcsVUFBQyxLQUFhLElBQUssT0FBQSxXQUFJLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLEVBQXBDLENBQW9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FqYXh9IGZyb20gXCIuL2FqYXhcIlxyXG5cclxuXHJcbi8vIOmmlumhtWJhbm5lcuWbvuaVsOaNruWSjOWSqOivouaVsOaNrlxyXG4vLyDpppbpobViYW5uZXLlm77mlbDmja7lkozlkqjor6LmlbDmja5cclxuLy8g6aaW6aG1YmFubmVy5Zu+5pWw5o2u5ZKM5ZKo6K+i5pWw5o2uXHJcblxyXG5leHBvcnQgY29uc3QgcmVxQmFubmVyID0gKCkgPT4gYWpheCgnL2FwaS9iYW5uZXJzJywge30pO1xyXG5cclxuLy8g5ZSu5ZCO5p+l6K+iXHJcbmV4cG9ydCBjb25zdCByZXFBZnRlclF1ZXJ5ID0gKGltZWk6IHN0cmluZykgPT4gYWpheCgnL2FwaS9hZnRlcl9xdWVyeScsIHtpbWVpfSk7XHJcblxyXG4vLyDnlKjmiLfms6jlhoxBUElcclxuZXhwb3J0IGNvbnN0IHJlcVJlZ2lzdGVyID0gKHtvcGVuaWQsIHBob25lLCBwYXNzd29yZCwgY29kZX06IGFueSkgPT4gYWpheCgnL2FwaS9yZWdpc3RlcicsIHtvcGVuaWQsIHBob25lLCBwYXNzd29yZCwgY29kZX0pXHJcblxyXG4vLyDmiJDkuLrlkIjkvZzllYZcclxuZXhwb3J0IGludGVyZmFjZSBQYXJ0bmV0IHtcclxuXHR0b2tlbjogc3RyaW5nO1xyXG5cdHBob25lOiBudW1iZXIgfCBzdHJpbmc7XHJcblx0bmFtZTogc3RyaW5nO1xyXG5cdGFkZHJlc3M6IHN0cmluZztcclxuXHRpZGVudGl0eT86IHN0cmluZztcclxuXHRpZF9jYXJkPzogbnVtYmVyIHwgc3RyaW5nO1xyXG5cdGlkX2NhcmRfcG9zaXRpdmU/OiBhbnk7XHJcblx0aWRfY2FyZF9jb250cmFyeT86IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlcVBhcnRuZXIgPSAoZGF0YTogUGFydG5ldCkgPT4gYWpheCgnL2FwaS9wYXJ0bmVyJywgZGF0YSk7XHJcblxyXG5cclxuLy8g55yB5biC5YiX6KGoXHJcbmV4cG9ydCBjb25zdCByZXFBZGRyZXNzTGlzdCA9ICgpID0+IGFqYXgoJy9hcGkvYWRkcmVzc19saXN0Jyk7XHJcblxyXG5cclxuLy8g5omL5py65Z6L5Y+3XHJcbmV4cG9ydCBjb25zdCByZXFQaG9uZU1vZGVscyA9ICgpID0+IGFqYXgoJy9hcGkvcGhvbmVfbW9kZWxzJyk7XHJcblxyXG4vLyDlj5HpgIEg5L+h5oGvXHJcbmV4cG9ydCBjb25zdCBzZW5kTXNnID0gKHttb2JpbGUsIHR5cGV9OiBhbnkpID0+IGFqYXgoJy9hcGkvc2VuZF9tZXNzYWdlJywge21vYmlsZSwgdHlwZX0pO1xyXG5cclxuLy8g55So5oi355m75b2VXHJcbmludGVyZmFjZSBMb2dpbiB7XHJcblx0dHlwZTogbnVtYmVyO1xyXG5cdG9wZW5pZD86IHN0cmluZztcclxuXHRwaG9uZT86IHN0cmluZztcclxuXHRwYXNzd29yZD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlcUxvZ2luID0gKHt0eXBlLCBvcGVuaWQsIHBob25lLCBwYXNzd29yZH06IExvZ2luKSA9PiBhamF4KCcvYXBpL2xvZ2luJywge3R5cGUsIG9wZW5pZCwgcGhvbmUsIHBhc3N3b3JkfSk7XHJcblxyXG4vLyDmiYvmnLrotLTohpxcclxuaW50ZXJmYWNlIEZyZWVGaWxlIHtcclxuXHR0b2tlbjogc3RyaW5nO1xyXG5cdHBob25lX21vZGVsOiBzdHJpbmcgfCBudWxsO1xyXG5cdHNlcmlhbF9udW1iZXI6IHN0cmluZztcclxuXHRwaG9uZTogbnVtYmVyIHwgc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG5cdGNvZGU6IHN0cmluZyB8IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlcUdldEZyZWVGaWxtID0gKGRhdGE6IEZyZWVGaWxlKSA9PiBhamF4KCcvYXBpL2dldF9mcmVlX2ZpbG0nLCBkYXRhKTtcclxuXHJcbi8vIOWuouacjeeCueivnVxyXG5leHBvcnQgY29uc3QgcmVxU2VydmljZSA9ICgpID0+IGFqYXgoJy9hcGkvc2VydmljZScpO1xyXG5cclxuLy8g5L+u5pS555So5oi35Z+65pys5L+h5oGvXHJcbmludGVyZmFjZSBCYXNpY0luZm9ybWF0aW9uIHtcclxuXHR0b2tlbjogc3RyaW5nO1xyXG5cdG5hbWU/OiBzdHJpbmc7XHJcblx0aWRfY2FyZD86IG51bWJlciB8IHN0cmluZztcclxuXHRpZF9jYXJkX3Bvc2l0aXZlPzogYW55O1xyXG5cdGlkX2NhcmRfY29udHJhcnk/OiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZXFVcGRhdGVCYXNpY0luZm9ybWF0aW9uID0gKGRhdGE6QmFzaWNJbmZvcm1hdGlvbik9PmFqYXgoJy9hcGkvdXBkYXRlX2Jhc2ljX2luZm9ybWF0aW9uJyxkYXRhKTtcclxuXHJcbi8vIOS/ruaUueeUqOaIt+aUtuasvuS/oeaBr1xyXG5pbnRlcmZhY2UgR2F0aGVyaW5nSW5mb3JtYXRpb24ge1xyXG5cdHRva2VuOiBzdHJpbmc7XHJcblx0YWxpcGF5X2FjY291bnQ/OiBzdHJpbmc7XHJcblx0YWxpcGF5X25hbWU/OiBzdHJpbmc7XHJcblx0YmFua19uYW1lPzogc3RyaW5nO1xyXG5cdGJhbmtfbnVtYmVyPzogc3RyaW5nO1xyXG5cdGJhbmtfdHlwZT86IHN0cmluZztcclxuXHRvcGVuaW5nX2Jhbms/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZXF1cGRhdGVfZ2F0aGVyaW5nX2luZm9ybWF0aW9uID0gKGRhdGE6IEdhdGhlcmluZ0luZm9ybWF0aW9uKSA9PiBhamF4KCcvYXBpL3VwZGF0ZV9nYXRoZXJpbmdfaW5mb3JtYXRpb24nLCBkYXRhKTtcclxuXHJcbi8vIOiOt+WPlueUqOaIt+S/oeaBr1xyXG5leHBvcnQgY29uc3QgcmVxVXNlckluZm9ybWF0aW9uID0gKHRva2VuOiBvYmplY3QpID0+IGFqYXgoJy9hcGkvdXNlcl9pbmZvcm1hdGlvbicsIHRva2VuKTtcclxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = require("./ajax");
exports.reqBanner = function () { return ajax_1.ajax('/api/banners', {}); };
exports.reqAfterQuery = function (imei) { return ajax_1.ajax('/api/after_query', { imei: imei }); };
exports.reqRegister = function (_a) {
    var openid = _a.openid, phone = _a.phone, password = _a.password, code = _a.code;
    return ajax_1.ajax('/api/register', { openid: openid, phone: phone, password: password, code: code });
};
exports.reqPartner = function (data) { return ajax_1.ajax('/api/partner', data); };
exports.reqAddressList = function () { return ajax_1.ajax('/api/address_list'); };
exports.reqPhoneModels = function () { return ajax_1.ajax('/api/phone_models'); };
exports.sendMsg = function (_a) {
    var mobile = _a.mobile, type = _a.type;
    return ajax_1.ajax('/api/send_message', { mobile: mobile, type: type });
};
exports.reqLogin = function (_a) {
    var type = _a.type, openid = _a.openid, phone = _a.phone, password = _a.password;
    return ajax_1.ajax('/api/login', { type: type, openid: openid, phone: phone, password: password });
};
exports.reqGetFreeFilm = function (data) { return ajax_1.ajax('/api/get_free_film', data); };
exports.reqService = function () { return ajax_1.ajax('/api/service'); };
exports.reqUpdateBasicInformation = function (data) { return ajax_1.ajax('/api/update_basic_information', data); };
exports.requpdate_gathering_information = function (data) { return ajax_1.ajax('/api/update_gathering_information', data); };
exports.reqUserInformation = function (token) { return ajax_1.ajax('/api/user_information', token); };
exports.reqOpenid = function (code) { return ajax_1.ajax('/api/mini_program', { code: code }); };
exports.reqCheckUser = function (openid) { return ajax_1.ajax('/api/check_user', { openid: openid }); };
exports.sheet = function (id) { return ajax_1.ajax('/api/sheet_list', { id: id }); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEyQjtBQU9kLFFBQUEsU0FBUyxHQUFHLGNBQU0sT0FBQSxXQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxFQUF4QixDQUF3QixDQUFDO0FBRzNDLFFBQUEsYUFBYSxHQUFHLFVBQUMsSUFBWSxJQUFLLE9BQUEsV0FBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDO0FBR25FLFFBQUEsV0FBVyxHQUFHLFVBQUMsRUFBb0M7UUFBbkMsa0JBQU0sRUFBRSxnQkFBSyxFQUFFLHNCQUFRLEVBQUUsY0FBSTtJQUFXLE9BQUEsV0FBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLElBQUksTUFBQSxFQUFDLENBQUM7QUFBdEQsQ0FBc0QsQ0FBQztBQWMvRyxRQUFBLFVBQVUsR0FBRyxVQUFDLElBQWEsSUFBSyxPQUFBLFdBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQTFCLENBQTBCLENBQUM7QUFJM0QsUUFBQSxjQUFjLEdBQUcsY0FBTSxPQUFBLFdBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUF6QixDQUF5QixDQUFDO0FBSWpELFFBQUEsY0FBYyxHQUFHLGNBQU0sT0FBQSxXQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBekIsQ0FBeUIsQ0FBQztBQUdqRCxRQUFBLE9BQU8sR0FBRyxVQUFDLEVBQW1CO1FBQWxCLGtCQUFNLEVBQUUsY0FBSTtJQUFXLE9BQUEsV0FBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUMsTUFBTSxRQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUMsQ0FBQztBQUF6QyxDQUF5QyxDQUFDO0FBVTdFLFFBQUEsUUFBUSxHQUFHLFVBQUMsRUFBc0M7UUFBckMsY0FBSSxFQUFFLGtCQUFNLEVBQUUsZ0JBQUssRUFBRSxzQkFBUTtJQUFhLE9BQUEsV0FBSSxDQUFDLFlBQVksRUFBRSxFQUFDLElBQUksTUFBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFDLENBQUM7QUFBbkQsQ0FBbUQsQ0FBQztBQVczRyxRQUFBLGNBQWMsR0FBRyxVQUFDLElBQWMsSUFBSyxPQUFBLFdBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQztBQUd0RSxRQUFBLFVBQVUsR0FBRyxjQUFNLE9BQUEsV0FBSSxDQUFDLGNBQWMsQ0FBQyxFQUFwQixDQUFvQixDQUFDO0FBV3hDLFFBQUEseUJBQXlCLEdBQUcsVUFBQyxJQUFzQixJQUFLLE9BQUEsV0FBSSxDQUFDLCtCQUErQixFQUFFLElBQUksQ0FBQyxFQUEzQyxDQUEyQyxDQUFDO0FBYXBHLFFBQUEsK0JBQStCLEdBQUcsVUFBQyxJQUEwQixJQUFLLE9BQUEsV0FBSSxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxFQUEvQyxDQUErQyxDQUFDO0FBR2xILFFBQUEsa0JBQWtCLEdBQUcsVUFBQyxLQUFhLElBQUssT0FBQSxXQUFJLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLEVBQXBDLENBQW9DLENBQUM7QUFHN0UsUUFBQSxTQUFTLEdBQUcsVUFBQyxJQUFZLElBQUssT0FBQSxXQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBQyxJQUFJLE1BQUEsRUFBQyxDQUFDLEVBQWpDLENBQWlDLENBQUM7QUFHaEUsUUFBQSxZQUFZLEdBQUcsVUFBQyxNQUFjLElBQUssT0FBQSxXQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLEVBQWpDLENBQWlDLENBQUM7QUFHckUsUUFBQSxLQUFLLEdBQUcsVUFBQyxFQUFVLElBQUssT0FBQSxXQUFJLENBQUMsaUJBQWlCLEVBQUMsRUFBQyxFQUFFLElBQUEsRUFBQyxDQUFDLEVBQTVCLENBQTRCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FqYXh9IGZyb20gXCIuL2FqYXhcIlxuXG5cbi8vIOmmlumhtWJhbm5lcuWbvuaVsOaNruWSjOWSqOivouaVsOaNrlxuLy8g6aaW6aG1YmFubmVy5Zu+5pWw5o2u5ZKM5ZKo6K+i5pWw5o2uXG4vLyDpppbpobViYW5uZXLlm77mlbDmja7lkozlkqjor6LmlbDmja5cblxuZXhwb3J0IGNvbnN0IHJlcUJhbm5lciA9ICgpID0+IGFqYXgoJy9hcGkvYmFubmVycycsIHt9KTtcblxuLy8g5ZSu5ZCO5p+l6K+iXG5leHBvcnQgY29uc3QgcmVxQWZ0ZXJRdWVyeSA9IChpbWVpOiBzdHJpbmcpID0+IGFqYXgoJy9hcGkvYWZ0ZXJfcXVlcnknLCB7aW1laX0pO1xuXG4vLyDnlKjmiLfms6jlhoxBUElcbmV4cG9ydCBjb25zdCByZXFSZWdpc3RlciA9ICh7b3BlbmlkLCBwaG9uZSwgcGFzc3dvcmQsIGNvZGV9OiBhbnkpID0+IGFqYXgoJy9hcGkvcmVnaXN0ZXInLCB7b3BlbmlkLCBwaG9uZSwgcGFzc3dvcmQsIGNvZGV9KTtcblxuLy8g5oiQ5Li65ZCI5L2c5ZWGXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRuZXQge1xuXHR0b2tlbjogc3RyaW5nO1xuXHRwaG9uZTogbnVtYmVyIHwgc3RyaW5nO1xuXHRuYW1lOiBzdHJpbmc7XG5cdGFkZHJlc3M6IHN0cmluZztcblx0aWRlbnRpdHk/OiBzdHJpbmc7XG5cdGlkX2NhcmQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cdGlkX2NhcmRfcG9zaXRpdmU/OiBhbnk7XG5cdGlkX2NhcmRfY29udHJhcnk/OiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCByZXFQYXJ0bmVyID0gKGRhdGE6IFBhcnRuZXQpID0+IGFqYXgoJy9hcGkvcGFydG5lcicsIGRhdGEpO1xuXG5cbi8vIOecgeW4guWIl+ihqFxuZXhwb3J0IGNvbnN0IHJlcUFkZHJlc3NMaXN0ID0gKCkgPT4gYWpheCgnL2FwaS9hZGRyZXNzX2xpc3QnKTtcblxuXG4vLyDmiYvmnLrlnovlj7dcbmV4cG9ydCBjb25zdCByZXFQaG9uZU1vZGVscyA9ICgpID0+IGFqYXgoJy9hcGkvcGhvbmVfbW9kZWxzJyk7XG5cbi8vIOWPkemAgSDkv6Hmga9cbmV4cG9ydCBjb25zdCBzZW5kTXNnID0gKHttb2JpbGUsIHR5cGV9OiBhbnkpID0+IGFqYXgoJy9hcGkvc2VuZF9tZXNzYWdlJywge21vYmlsZSwgdHlwZX0pO1xuXG4vLyDnlKjmiLfnmbvlvZVcbmludGVyZmFjZSBMb2dpbiB7XG5cdHR5cGU6IG51bWJlcjtcblx0b3BlbmlkPzogc3RyaW5nO1xuXHRwaG9uZT86IHN0cmluZztcblx0cGFzc3dvcmQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCByZXFMb2dpbiA9ICh7dHlwZSwgb3BlbmlkLCBwaG9uZSwgcGFzc3dvcmR9OiBMb2dpbikgPT4gYWpheCgnL2FwaS9sb2dpbicsIHt0eXBlLCBvcGVuaWQsIHBob25lLCBwYXNzd29yZH0pO1xuXG4vLyDmiYvmnLrotLTohpxcbmludGVyZmFjZSBGcmVlRmlsZSB7XG5cdHRva2VuOiBzdHJpbmc7XG5cdHBob25lX21vZGVsOiBzdHJpbmcgfCBudWxsO1xuXHRzZXJpYWxfbnVtYmVyOiBzdHJpbmc7XG5cdHBob25lOiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdGNvZGU6IHN0cmluZyB8IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IHJlcUdldEZyZWVGaWxtID0gKGRhdGE6IEZyZWVGaWxlKSA9PiBhamF4KCcvYXBpL2dldF9mcmVlX2ZpbG0nLCBkYXRhKTtcblxuLy8g5a6i5pyN54K56K+dXG5leHBvcnQgY29uc3QgcmVxU2VydmljZSA9ICgpID0+IGFqYXgoJy9hcGkvc2VydmljZScpO1xuXG4vLyDkv67mlLnnlKjmiLfln7rmnKzkv6Hmga9cbmludGVyZmFjZSBCYXNpY0luZm9ybWF0aW9uIHtcblx0dG9rZW46IHN0cmluZztcblx0bmFtZT86IHN0cmluZztcblx0aWRfY2FyZD86IG51bWJlciB8IHN0cmluZztcblx0aWRfY2FyZF9wb3NpdGl2ZT86IGFueTtcblx0aWRfY2FyZF9jb250cmFyeT86IGFueTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlcVVwZGF0ZUJhc2ljSW5mb3JtYXRpb24gPSAoZGF0YTogQmFzaWNJbmZvcm1hdGlvbikgPT4gYWpheCgnL2FwaS91cGRhdGVfYmFzaWNfaW5mb3JtYXRpb24nLCBkYXRhKTtcblxuLy8g5L+u5pS555So5oi35pS25qy+5L+h5oGvXG5pbnRlcmZhY2UgR2F0aGVyaW5nSW5mb3JtYXRpb24ge1xuXHR0b2tlbjogc3RyaW5nO1xuXHRhbGlwYXlfYWNjb3VudD86IHN0cmluZztcblx0YWxpcGF5X25hbWU/OiBzdHJpbmc7XG5cdGJhbmtfbmFtZT86IHN0cmluZztcblx0YmFua19udW1iZXI/OiBzdHJpbmc7XG5cdGJhbmtfdHlwZT86IHN0cmluZztcblx0b3BlbmluZ19iYW5rPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgcmVxdXBkYXRlX2dhdGhlcmluZ19pbmZvcm1hdGlvbiA9IChkYXRhOiBHYXRoZXJpbmdJbmZvcm1hdGlvbikgPT4gYWpheCgnL2FwaS91cGRhdGVfZ2F0aGVyaW5nX2luZm9ybWF0aW9uJywgZGF0YSk7XG5cbi8vIOiOt+WPlueUqOaIt+S/oeaBr1xuZXhwb3J0IGNvbnN0IHJlcVVzZXJJbmZvcm1hdGlvbiA9ICh0b2tlbjogb2JqZWN0KSA9PiBhamF4KCcvYXBpL3VzZXJfaW5mb3JtYXRpb24nLCB0b2tlbik7XG5cbi8vIG9wZW5pZFxuZXhwb3J0IGNvbnN0IHJlcU9wZW5pZCA9IChjb2RlOiBzdHJpbmcpID0+IGFqYXgoJy9hcGkvbWluaV9wcm9ncmFtJywge2NvZGV9KTtcblxuLy8g5qCh6aqM55So5oi35piv5ZCm5a2Y5ZyoXG5leHBvcnQgY29uc3QgcmVxQ2hlY2tVc2VyID0gKG9wZW5pZDogc3RyaW5nKSA9PiBhamF4KCcvYXBpL2NoZWNrX3VzZXInLCB7b3BlbmlkfSk7XG5cbi8vIOaKpeS7t+WIl+ihqFxuZXhwb3J0IGNvbnN0IHNoZWV0ID0gKGlkOiBzdHJpbmcpID0+IGFqYXgoJy9hcGkvc2hlZXRfbGlzdCcse2lkfSk7XG4iXX0=
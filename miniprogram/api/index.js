"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = require("./ajax");
exports.reqBanner = function () { return ajax_1.ajax('/api/banners', {}); };
exports.reqAfterQuery = function (imei) { return ajax_1.ajax('/api/after_query', { imei: imei }); };
exports.reqRegister = function (_a) {
    var openid = _a.openid, phone = _a.phone, password = _a.password, code = _a.code;
    return ajax_1.ajax('/api/register', { openid: openid, phone: phone, password: password, code: code });
};
exports.reqPartner = function (_a) {
    var token = _a.token, phone = _a.phone, name = _a.name, address = _a.address, identity = _a.identity, id_card = _a.id_card, id_card_contrary = _a.id_card_contrary, id_card_positive = _a.id_card_positive;
    return ajax_1.ajax('/api/partner', { token: token, phone: phone, name: name, address: address, identity: identity, id_card: id_card, id_card_contrary: id_card_contrary, id_card_positive: id_card_positive });
};
exports.reqAddressList = function () { return ajax_1.ajax('/api/address_list'); };
exports.reqPhoneModels = function () { return ajax_1.ajax('/api/phone_models'); };
exports.sendMsg = function (_a) {
    var mobile = _a.mobile, type = _a.type;
    return ajax_1.ajax('/api/send_message', { mobile: mobile, type: type });
};
exports.reqLogin = function (_a) {
    var type = _a.type, openid = _a.openid, phone = _a.phone, password = _a.password;
    return ajax_1.ajax('/api/login', { type: type, openid: openid, phone: phone, password: password });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEyQjtBQU9kLFFBQUEsU0FBUyxHQUFHLGNBQU0sT0FBQSxXQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxFQUF4QixDQUF3QixDQUFDO0FBRzNDLFFBQUEsYUFBYSxHQUFHLFVBQUMsSUFBWSxJQUFLLE9BQUEsV0FBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDO0FBR25FLFFBQUEsV0FBVyxHQUFHLFVBQUMsRUFBb0M7UUFBbkMsa0JBQU0sRUFBRSxnQkFBSyxFQUFFLHNCQUFRLEVBQUUsY0FBSTtJQUFXLE9BQUEsV0FBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLElBQUksTUFBQSxFQUFDLENBQUM7QUFBdEQsQ0FBc0QsQ0FBQTtBQWM5RyxRQUFBLFVBQVUsR0FBRyxVQUFDLEVBQTZGO1FBQTVGLGdCQUFLLEVBQUUsZ0JBQUssRUFBRSxjQUFJLEVBQUUsb0JBQU8sRUFBRSxzQkFBUSxFQUFFLG9CQUFPLEVBQUUsc0NBQWdCLEVBQUUsc0NBQWdCO0lBQWUsT0FBQSxXQUFJLENBQUMsY0FBYyxFQUFFLEVBQUMsS0FBSyxPQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsZ0JBQWdCLGtCQUFBLEVBQUUsZ0JBQWdCLGtCQUFBLEVBQUMsQ0FBQztBQUExRyxDQUEwRyxDQUFDO0FBSTNOLFFBQUEsY0FBYyxHQUFHLGNBQU0sT0FBQSxXQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBekIsQ0FBeUIsQ0FBQztBQUlqRCxRQUFBLGNBQWMsR0FBRyxjQUFNLE9BQUEsV0FBSSxDQUFDLG1CQUFtQixDQUFDLEVBQXpCLENBQXlCLENBQUM7QUFHakQsUUFBQSxPQUFPLEdBQUcsVUFBQyxFQUFtQjtRQUFsQixrQkFBTSxFQUFFLGNBQUk7SUFBVyxPQUFBLFdBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLE1BQU0sUUFBQSxFQUFFLElBQUksTUFBQSxFQUFDLENBQUM7QUFBekMsQ0FBeUMsQ0FBQztBQVU3RSxRQUFBLFFBQVEsR0FBRyxVQUFDLEVBQXNDO1FBQXJDLGNBQUksRUFBRSxrQkFBTSxFQUFFLGdCQUFLLEVBQUUsc0JBQVE7SUFBYSxPQUFBLFdBQUksQ0FBQyxZQUFZLEVBQUUsRUFBQyxJQUFJLE1BQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxRQUFRLFVBQUEsRUFBQyxDQUFDO0FBQW5ELENBQW1ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FqYXh9IGZyb20gXCIuL2FqYXhcIlxuXG5cbi8vIOmmlumhtWJhbm5lcuWbvuaVsOaNruWSjOWSqOivouaVsOaNrlxuLy8g6aaW6aG1YmFubmVy5Zu+5pWw5o2u5ZKM5ZKo6K+i5pWw5o2uXG4vLyDpppbpobViYW5uZXLlm77mlbDmja7lkozlkqjor6LmlbDmja5cblxuZXhwb3J0IGNvbnN0IHJlcUJhbm5lciA9ICgpID0+IGFqYXgoJy9hcGkvYmFubmVycycsIHt9KTtcblxuLy8g5ZSu5ZCO5p+l6K+iXG5leHBvcnQgY29uc3QgcmVxQWZ0ZXJRdWVyeSA9IChpbWVpOiBzdHJpbmcpID0+IGFqYXgoJy9hcGkvYWZ0ZXJfcXVlcnknLCB7aW1laX0pO1xuXG4vLyDnlKjmiLfms6jlhoxBUElcbmV4cG9ydCBjb25zdCByZXFSZWdpc3RlciA9ICh7b3BlbmlkLCBwaG9uZSwgcGFzc3dvcmQsIGNvZGV9OiBhbnkpID0+IGFqYXgoJy9hcGkvcmVnaXN0ZXInLCB7b3BlbmlkLCBwaG9uZSwgcGFzc3dvcmQsIGNvZGV9KVxuXG4vLyDmiJDkuLrlkIjkvZzllYZcbmV4cG9ydCBpbnRlcmZhY2UgUGFydG5ldCB7XG5cdHRva2VuOiBzdHJpbmcsXG5cdHBob25lOiBudW1iZXIgfCBzdHJpbmcsXG5cdG5hbWU6IHN0cmluZyxcblx0YWRkcmVzczogc3RyaW5nLFxuXHRpZGVudGl0eT86IHN0cmluZyxcblx0aWRfY2FyZD86IG51bWJlciB8IHN0cmluZyxcblx0aWRfY2FyZF9wb3NpdGl2ZT86IGFueSxcblx0aWRfY2FyZF9jb250cmFyeT86IGFueSxcbn1cblxuZXhwb3J0IGNvbnN0IHJlcVBhcnRuZXIgPSAoe3Rva2VuLCBwaG9uZSwgbmFtZSwgYWRkcmVzcywgaWRlbnRpdHksIGlkX2NhcmQsIGlkX2NhcmRfY29udHJhcnksIGlkX2NhcmRfcG9zaXRpdmV9OiBQYXJ0bmV0KSA9PiBhamF4KCcvYXBpL3BhcnRuZXInLCB7dG9rZW4sIHBob25lLCBuYW1lLCBhZGRyZXNzLCBpZGVudGl0eSwgaWRfY2FyZCwgaWRfY2FyZF9jb250cmFyeSwgaWRfY2FyZF9wb3NpdGl2ZX0pO1xuXG5cbi8vIOecgeW4guWIl+ihqFxuZXhwb3J0IGNvbnN0IHJlcUFkZHJlc3NMaXN0ID0gKCkgPT4gYWpheCgnL2FwaS9hZGRyZXNzX2xpc3QnKTtcblxuXG4vLyDmiYvmnLrlnovlj7dcbmV4cG9ydCBjb25zdCByZXFQaG9uZU1vZGVscyA9ICgpID0+IGFqYXgoJy9hcGkvcGhvbmVfbW9kZWxzJyk7XG5cbi8vIOWPkemAgSDkv6Hmga9cbmV4cG9ydCBjb25zdCBzZW5kTXNnID0gKHttb2JpbGUsIHR5cGV9OiBhbnkpID0+IGFqYXgoJy9hcGkvc2VuZF9tZXNzYWdlJywge21vYmlsZSwgdHlwZX0pO1xuXG4vLyDnlKjmiLfnmbvlvZVcbmludGVyZmFjZSBMb2dpbiB7XG5cdHR5cGU6IG51bWJlcixcblx0b3BlbmlkPzogc3RyaW5nLFxuXHRwaG9uZT86IHN0cmluZyxcblx0cGFzc3dvcmQ/OiBzdHJpbmcsXG59XG5cbmV4cG9ydCBjb25zdCByZXFMb2dpbiA9ICh7dHlwZSwgb3BlbmlkLCBwaG9uZSwgcGFzc3dvcmR9OiBMb2dpbikgPT4gYWpheCgnL2FwaS9sb2dpbicsIHt0eXBlLCBvcGVuaWQsIHBob25lLCBwYXNzd29yZH0pO1xuXG4iXX0=
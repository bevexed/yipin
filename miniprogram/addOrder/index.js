"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var order_1 = require("../api/order");
var ajax_1 = require("../api/ajax");
Page({
    data: {
        address: {},
        information: '',
        amount: '',
        note: '',
        pics: [],
        token: '',
        baseUrl: ajax_1.base
    },
    onLoad: function () {
        this.getAddress();
        var that = this;
        wx.getStorage({
            key: 'token',
            success: function (res) {
                that.setData({
                    token: res.data
                });
            }
        });
    },
    write: function (e) {
        this.setData({
            information: e.detail.value
        });
    },
    amount: function (e) {
        this.setData({
            amount: e.detail.value
        });
    },
    noteText: function (e) {
        this.setData({
            note: e.detail.value
        });
    },
    getAddress: function () {
        var _this = this;
        order_1.address().then(function (res) {
            _this.setData({
                address: res.data
            });
        });
    },
    uploadImage: function () {
        var that = this;
        var pics = this.data.pics;
        wx.chooseImage({
            count: 3 - pics.length,
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera'],
            success: function (res) {
                var tempFilePaths = res.tempFilePaths;
                var picAll = pics.concat(tempFilePaths);
                that.uploadimg({
                    url: that.data.baseUrl + '/api/upload_img',
                    path: picAll
                });
            }
        });
    },
    uploadimg: function (data) {
        var that = this, i = data.i ? data.i : 0, success = data.success ? data.success : 0, fail = data.fail ? data.fail : 0;
        wx.uploadFile({
            url: data.url,
            filePath: data.path[i],
            name: 'image',
            success: function (resp) {
                success++;
                var conf = JSON.parse(resp.data);
                var arrImage = [];
                arrImage.push(conf.data);
                var picAlls = that.data.pics.concat(arrImage);
                that.setData({
                    pics: picAlls
                });
            },
            fail: function () {
                fail++;
                console.log('fail:' + i + "fail:" + fail);
            },
            complete: function () {
                console.log(i);
                i++;
                if (i == data.path.length) {
                    console.log('执行完毕');
                    console.log('成功：' + success + " 失败：" + fail);
                }
                else {
                    console.log(i);
                    data.i = i;
                    data.success = success;
                    data.fail = fail;
                    that.uploadimg(data);
                }
            }
        });
    },
    yulan: function () {
        wx.previewImage({
            current: this.data.pics,
            urls: this.data.pics
        });
    },
    tijiao: function () {
        var picture = '';
        this.data.pics.map(function (res) {
            picture += res + ',';
        });
        picture = picture.substring(0, picture.length - 1);
        if (this.data.information == '' || this.data.amount == '') {
            wx.showToast({
                title: '请输入必填信息',
                icon: 'none',
                duration: 2000
            });
            return;
        }
        var reg = /^[1-9]\d*$/;
        if (!reg.test(this.data.amount)) {
            wx.showToast({
                title: '请输入正确的下单数量',
                icon: 'none',
                duration: 2000
            });
            return;
        }
        order_1.addOrder(this.data.token, this.data.information, this.data.amount, this.data.note, picture).then(function (res) {
            if (res.code == 1) {
                console.log(res);
                console.log(res.data);
                wx.navigateTo({
                    url: '../post/post?id=' + res.data
                });
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,